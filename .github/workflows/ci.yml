name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20"
  AWS_REGION: "us-east-1"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
      has-infrastructure-changes: ${{ steps.affected.outputs.infrastructure }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Verify package-lock.json
        run: |
          echo "Checking package-lock.json..."
          if [ ! -f package-lock.json ]; then
            echo "ERROR: package-lock.json not found!"
            exit 1
          fi
          echo "package-lock.json exists ($(wc -c < package-lock.json) bytes)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Install dependencies
        run: |
          echo "Starting npm ci..."
          npm ci --no-audit --no-fund --timeout=300000
          echo "npm ci completed successfully"

      - name: Get affected projects
        id: affected
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="HEAD~1"
          fi

          echo "Detecting affected projects with base SHA: $BASE_SHA"

          # Get all affected projects for debugging
          echo "All affected projects:"
          npx nx show projects --affected --base=$BASE_SHA || echo "No affected projects found"

          # Get affected apps (excluding e2e projects) and format as JSON array
          AFFECTED_APPS=$(npx nx show projects --affected --base=$BASE_SHA --type=app | grep -v '\-e2e$' | jq -R -s -c 'split("\n")[:-1]')

          # If no apps are affected but we're on master, include core apps
          if [ "$AFFECTED_APPS" = "[]" ] && [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "No apps affected, but on master branch - including core apps"
            AFFECTED_APPS='["api", "web"]'
          fi

          echo "Affected apps: $AFFECTED_APPS"
          echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT

          # Get affected libs and format as JSON array
          AFFECTED_LIBS=$(npx nx show projects --affected --base=$BASE_SHA --type=lib | jq -R -s -c 'split("\n")[:-1]')
          echo "Affected libs: $AFFECTED_LIBS"
          echo "libs=$AFFECTED_LIBS" >> $GITHUB_OUTPUT

          # Check if infrastructure has changes
          if npx nx show projects --affected --base=$BASE_SHA | grep -q "infrastructure"; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changes detected"
          else
            echo "infrastructure=false" >> $GITHUB_OUTPUT
            echo "No infrastructure changes detected"
          fi

  test-and-lint:
    needs: setup
    if: needs.setup.outputs.affected-libs != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-libs) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --no-audit --no-fund --timeout=300000
          echo "Dependencies installed successfully"

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/nx
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('nx.json') }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-${{ runner.os }}-

      - name: Test ${{ matrix.project }}
        run: npx nx test ${{ matrix.project }}

      - name: Build ${{ matrix.project }}
        run: |
          # Only build if the project has a build target
          if npx nx show project ${{ matrix.project }} --json | jq -e '.targets.build' > /dev/null 2>&1; then
            npx nx build ${{ matrix.project }}
          else
            echo "Skipping build for ${{ matrix.project }} - no build target configured"
          fi

  build-apps:
    needs: [setup, test-and-lint]
    if: always() && needs.setup.outputs.affected-apps != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.setup.outputs.affected-apps) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --no-audit --no-fund --timeout=300000
          echo "Dependencies installed successfully"

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/nx
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('nx.json') }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-${{ runner.os }}-

      - name: Build ${{ matrix.app }}
        run: npx nx build ${{ matrix.app }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: dist/${{ matrix.app }}
          retention-days: 1

  deploy-infrastructure:
    needs: [setup, test-and-lint, build-apps]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.setup.outputs.has-infrastructure-changes == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --no-audit --no-fund --timeout=300000
          echo "Dependencies installed successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build infrastructure
        run: npx nx build infrastructure

      - name: Deploy infrastructure
        run: |
          cd infrastructure
          npx cdk deploy --all --require-approval never --context environment=prod
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy-applications:
    needs: [setup, build-apps, deploy-infrastructure]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') && needs.setup.outputs.affected-apps != '[]'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        app: ${{ fromJson(needs.setup.outputs.affected-apps) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --no-audit --no-fund --timeout=300000
          echo "Dependencies installed successfully"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: dist/${{ matrix.app }}
        continue-on-error: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ${{ matrix.app }}
        run: |
          echo "Deploying ${{ matrix.app }} application"
          # Deployment logic will be implemented in future tasks
          echo "Deployment completed for ${{ matrix.app }}"

  health-check:
    needs: [deploy-applications]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.deploy-applications.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          echo "Running post-deployment health checks"
          # Health check logic will be implemented in future tasks
          echo "Health checks passed"
