{
  "QueryLanguage": "JSONata",
  "Comment": "Extracción de información de Votaciones y Asistencia a Sesiones a partir de su id",
  "StartAt": "Assign legId & sesId",
  "States": {
    "Assign legId & sesId": {
      "Type": "Pass",
      "Next": "Parallel Sesion",
      "Assign": {
        "legId": "{% $states.input.legId %}",
        "sesId": "{% $states.input.sesId %}"
      }
    },
    "Parallel Sesion": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Asistencia",
          "States": {
            "Get Asistencia": {
              "Type": "Task",
              "Resource": "arn:aws:states:::http:invoke",
              "Arguments": {
                "ApiEndpoint": "https://web-back.senado.cl/api/sessions/attendance",
                "InvocationConfig": {
                  "ConnectionArn": "${events_connection_arn}"
                },
                "QueryParameters": {
                  "id_sesion": "{% $sesId %}"
                },
                "Method": "GET"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "BackoffRate": 2,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Parallel Asistencia",
              "Output": "{% $states.result.ResponseBody.data %}"
            },
            "Parallel Asistencia": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Transform asistencia",
                  "States": {
                    "Transform asistencia": {
                      "Type": "Pass",
                      "Next": "Update Sesion - asistencia",
                      "Output": "{% $states.input.{\n    \"sesId\": {\n        \"N\": ID_SESION ~> $string\n    },\n    \"sesNumero\": {\n        \"N\": NUMERO_SESION ~> $string\n    },\n    \"totalSenadores\": {\n        \"N\": TOTAL_SENADORES ~> $string\n    },\n    \"totalSesiones\": {\n        \"N\": TOTAL_SESIONES ~> $string\n    },\n    \"inicio\": {\n        \"S\": FECHA_HORA_INICIO\n    },\n    \"termino\": {\n        \"S\": FECHA_HORA_TERMINO\n    },\n    \"detalle\": {\n        \"L\": DATA[].{\n            \"M\": {\n                \"parId\": {\n                    \"N\": ID_PARLAMENTARIO ~> $string\n                },\n                \"parSlug\": {\n                    \"S\": SLUG\n                },\n                \"nombre\": {\n                    \"S\": NOMBRE\n                },\n                \"apellidoPaterno\": {\n                    \"S\": APELLIDO_PATERNO\n                },\n                \"apellidoMaterno\": {\n                    \"S\": APELLIDO_MATERNO\n                },\n                \"sesId\": {\n                    \"N\": ID_SESION ~> $string\n                },\n                \"sesNumero\": {\n                    \"N\": NUMERO_SESION ~> $string\n                },\n                \"asistencia\": {\n                    \"S\": ASISTENCIA\n                },\n                \"justificacion\": JUSTIFICACION != null ? {\n                    \"S\": JUSTIFICACION\n                } : undefined\n            }\n        }\n    } \n} %}"
                    },
                    "Update Sesion - asistencia": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:updateItem",
                      "Arguments": {
                        "TableName": "${sesiones_table_name}",
                        "Key": {
                          "sesId": {
                            "N": "{% $sesId %}"
                          },
                          "legId": {
                            "N": "{% $legId %}"
                          }
                        },
                        "UpdateExpression": "SET fechaModificacion = :fechaModificacion, asistencia = :asistencia",
                        "ExpressionAttributeValues": {
                          ":fechaModificacion": {
                            "S": "{% $now() %}"
                          },
                          ":asistencia": {
                            "M": "{% $states.input %}"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Extract senSlug's",
                  "States": {
                    "Extract senSlug's": {
                      "Type": "Pass",
                      "Next": "Senadores",
                      "Output": "{% $states.input.DATA[].SLUG ~> $distinct %}"
                    },
                    "Senadores": {
                      "Type": "Map",
                      "ItemProcessor": {
                        "ProcessorConfig": {
                          "Mode": "INLINE"
                        },
                        "StartAt": "Assign slug",
                        "States": {
                          "Assign slug": {
                            "Type": "Pass",
                            "Assign": {
                              "slug": "{% $states.input %}"
                            },
                            "Next": "Senador SQS"
                          },
                          "Senador SQS": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::sqs:sendMessage",
                            "Arguments": {
                              "QueueUrl": "${senador_queue_url}",
                              "MessageBody": "{% $slug %}"
                            },
                            "End": true,
                            "Output": {
                              "MessageId": "{% $states.result.MessageId %}"
                            }
                          }
                        }
                      },
                      "End": true,
                      "MaxConcurrency": 10
                    }
                  }
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Votaciones",
          "States": {
            "Get Votaciones": {
              "Type": "Task",
              "Resource": "arn:aws:states:::http:invoke",
              "Arguments": {
                "ApiEndpoint": "https://web-back.senado.cl/api/votes",
                "Method": "GET",
                "InvocationConfig": {
                  "ConnectionArn": "${events_connection_arn}"
                },
                "QueryParameters": {
                  "id_sesion": "{% $sesId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "BackoffRate": 2,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Parallel Votacion",
              "Output": "{% $states.result.ResponseBody %}"
            },
            "Parallel Votacion": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Transform votaciones",
                  "States": {
                    "Transform votaciones": {
                      "Type": "Pass",
                      "Next": "Update sesion - votaciones",
                      "Output": "{% $states.input.data.data[].{\n    \"M\": {\n        \"votId\": {\n            \"N\": ID_VOTACION ~> $string\n        },\n        \"sesId\": {\n            \"N\": ID_SESION ~> $string\n        },\n        \"sesNumero\": {\n            \"N\": NUMERO_SESION ~> $string\n        },\n        \"fecha\": {\n            \"S\": FECHA_VOTACION\n        },\n        \"hora\": {\n            \"S\": HORA\n        },\n        \"tema\": {\n            \"S\": TEMA\n        },\n        \"quorum\": {\n            \"S\": QUORUM\n        },\n        \"boletin\": {\n            \"S\": QUORUM\n        },\n        \"resultado\": {\n            \"M\": {\n                \"si\": {\n                    \"N\": SI ~> $string\n                },\n                \"no\": {\n                    \"N\": NO ~> $string\n                },\n                \"abs\": {\n                    \"N\": ABS ~> $string\n                },\n                \"pareo\": {\n                    \"N\": PAREO ~> $string\n                }\n            }\n        },\n        \"detalle\": {\n            \"M\": {\n                \"SI\": {\n                    \"L\": VOTACIONES.SI != 0 ? VOTACIONES.SI[].{\n                        \"M\": {\n                            \"parId\": {\n                                \"N\": PARLID ~> $string\n                            },\n                            \"parSlug\": {\n                                \"S\": SLUG\n                            }\n                        }\n                    } : []\n                },\n                \"NO\": {\n                    \"L\": VOTACIONES.NO != 0 ? VOTACIONES.NO[].{\n                        \"M\": {\n                            \"parId\": {\n                                \"N\": PARLID ~> $string\n                            },\n                            \"parSlug\": {\n                                \"S\": SLUG\n                            }\n                        }\n                    } : []\n                },\n                \"ABSTENCION\": {\n                    \"L\": VOTACIONES.ABSTENCION != 0 ? VOTACIONES.ABSTENCION[].{\n                        \"M\": {\n                            \"parId\": {\n                                \"N\": PARLID ~> $string\n                            },\n                            \"parSlug\": {\n                                \"S\": SLUG\n                            }\n                        }\n                    } : []\n                },\n                \"PAREO\": {\n                    \"L\": VOTACIONES.PAREO != 0 ? VOTACIONES.PAREO[].{\n                        \"M\": {\n                            \"parId\": {\n                                \"N\": PARLID ~> $string\n                            },\n                            \"parSlug\": {\n                                \"S\": SLUG\n                            }\n                        }\n                    } : []\n                }\n            }\n        }\n    }\n} %}"
                    },
                    "Update sesion - votaciones": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:updateItem",
                      "Arguments": {
                        "TableName": "${sesiones_table_name}",
                        "Key": {
                          "sesId": {
                            "N": "{% $sesId %}"
                          },
                          "legId": {
                            "N": "{% $legId %}"
                          }
                        },
                        "UpdateExpression": "SET fechaModificacion = :fechaModificacion, votaciones = :votaciones",
                        "ExpressionAttributeValues": {
                          ":fechaModificacion": {
                            "S": "{% $now() %}"
                          },
                          ":votaciones": {
                            "L": "{% $states.input %}"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Extract boletines",
                  "States": {
                    "Extract boletines": {
                      "Type": "Pass",
                      "Next": "Boletines",
                      "Output": "{% \n$map(\n    $states.input.data.data[].BOLETIN, \n    function($v) { \n        $split($v, \"-\")[0] \n    }\n) ~> $distinct \n%}"
                    },
                    "Boletines": {
                      "Type": "Map",
                      "ItemProcessor": {
                        "ProcessorConfig": {
                          "Mode": "INLINE"
                        },
                        "StartAt": "Assign boletin",
                        "States": {
                          "Assign boletin": {
                            "Type": "Pass",
                            "Assign": {
                              "boletin": "{% $states.input %}"
                            },
                            "Next": "Boletin SQS"
                          },
                          "Boletin SQS": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::sqs:sendMessage",
                            "Arguments": {
                              "QueueUrl": "${boletin_queue_url}",
                              "MessageBody": "{% $boletin %}"
                            },
                            "End": true,
                            "Output": {
                              "MessageId": "{% $states.result.MessageId %}"
                            }
                          }
                        }
                      },
                      "End": true,
                      "MaxConcurrency": 10
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }
      ],
      "End": true
    }
  }
}
